{
  "version": 3,
  "sources": ["browser-route-module:/Users/johnhooks/Projects/remix/examples/blog-tutorial/app/routes/posts/admin/new.tsx?browser", "../../../../../app/routes/posts/admin/new.tsx"],
  "sourcesContent": ["export { default } from \"/Users/johnhooks/Projects/remix/examples/blog-tutorial/app/routes/posts/admin/new.tsx\";", "import type { ActionArgs } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useActionData, useTransition } from \"@remix-run/react\";\nimport invariant from \"tiny-invariant\";\n\nimport { createPost } from \"~/models/post.server\";\n\nexport async function action({ request }: ActionArgs) {\n  const formData = await request.formData();\n\n  const title = formData.get(\"title\");\n  const slug = formData.get(\"slug\");\n  const markdown = formData.get(\"markdown\");\n\n  const errors = {\n    title: title ? null : \"Title is required\",\n    slug: slug ? null : \"Slug is required\",\n    markdown: markdown ? null : \"Markdown is required\",\n  };\n  const hasErrors = Object.values(errors).some((errorMessage) => errorMessage);\n  if (hasErrors) {\n    return json(errors);\n  }\n\n  invariant(typeof title === \"string\", \"title must be a string\");\n  invariant(typeof slug === \"string\", \"slug must be a string\");\n  invariant(typeof markdown === \"string\", \"markdown must be a string\");\n\n  await createPost({ title, slug, markdown });\n\n  return redirect(\"/posts/admin\");\n}\n\nconst inputClassName = `w-full rounded border border-gray-500 px-2 py-1 text-lg`;\n\nexport default function NewPost() {\n  const errors = useActionData<typeof action>();\n\n  const transition = useTransition();\n  const isCreating = Boolean(transition.submission);\n\n  return (\n    <Form method=\"post\">\n      <p>\n        <label>\n          Post Title:{\" \"}\n          {errors?.title ? (\n            <em className=\"text-red-600\">{errors.title}</em>\n          ) : null}\n          <input type=\"text\" name=\"title\" className={inputClassName} />\n        </label>\n      </p>\n      <p>\n        <label>\n          Post Slug:{\" \"}\n          {errors?.slug ? (\n            <em className=\"text-red-600\">{errors.slug}</em>\n          ) : null}\n          <input type=\"text\" name=\"slug\" className={inputClassName} />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"markdown\">\n          Markdown:{\" \"}\n          {errors?.markdown ? (\n            <em className=\"text-red-600\">{errors.markdown}</em>\n          ) : null}\n        </label>\n        <br />\n        <textarea\n          id=\"markdown\"\n          rows={20}\n          name=\"markdown\"\n          className={`${inputClassName} font-mono`}\n        />\n      </p>\n      <p className=\"text-right\">\n        <button\n          type=\"submit\"\n          className=\"rounded bg-blue-500 py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400 disabled:bg-blue-300\"\n          disabled={isCreating}\n        >\n          {isCreating ? \"Creating...\" : \"Create Post\"}\n        </button>\n      </p>\n    </Form>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAAA;;;ACAA;AAKA,kBAA2B;AA4B3B,IAAM,iBAAiB;AAER,mBAAmB;AAChC,QAAM,SAAS;AAEf,QAAM,aAAa;AACnB,QAAM,aAAa,QAAQ,WAAW;AAEtC,SACE,oCAAC,MAAD;AAAA,IAAM,QAAO;AAAA,KACX,oCAAC,KAAD,MACE,oCAAC,SAAD,MAAO,eACO,KACX,kCAAQ,SACP,oCAAC,MAAD;AAAA,IAAI,WAAU;AAAA,KAAgB,OAAO,SACnC,MACJ,oCAAC,SAAD;AAAA,IAAO,MAAK;AAAA,IAAO,MAAK;AAAA,IAAQ,WAAW;AAAA,QAG/C,oCAAC,KAAD,MACE,oCAAC,SAAD,MAAO,cACM,KACV,kCAAQ,QACP,oCAAC,MAAD;AAAA,IAAI,WAAU;AAAA,KAAgB,OAAO,QACnC,MACJ,oCAAC,SAAD;AAAA,IAAO,MAAK;AAAA,IAAO,MAAK;AAAA,IAAO,WAAW;AAAA,QAG9C,oCAAC,KAAD,MACE,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KAAW,aACd,KACT,kCAAQ,YACP,oCAAC,MAAD;AAAA,IAAI,WAAU;AAAA,KAAgB,OAAO,YACnC,OAEN,oCAAC,MAAD,OACA,oCAAC,YAAD;AAAA,IACE,IAAG;AAAA,IACH,MAAM;AAAA,IACN,MAAK;AAAA,IACL,WAAW,GAAG;AAAA,OAGlB,oCAAC,KAAD;AAAA,IAAG,WAAU;AAAA,KACX,oCAAC,UAAD;AAAA,IACE,MAAK;AAAA,IACL,WAAU;AAAA,IACV,UAAU;AAAA,KAET,aAAa,gBAAgB;AAAA;",
  "names": []
}
