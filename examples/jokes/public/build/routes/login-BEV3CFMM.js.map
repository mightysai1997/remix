{
  "version": 3,
  "sources": ["browser-route-module:/Users/kentcdodds/code/remix/examples/jokes/app/routes/login.tsx?browser", "../../../app/routes/login.tsx"],
  "sourcesContent": ["export { default, links, meta } from \"/Users/kentcdodds/code/remix/examples/jokes/app/routes/login.tsx\";", "import type {\n  ActionFunction,\n  HeadersFunction,\n  LinksFunction,\n  MetaFunction,\n} from \"remix\";\nimport { useActionData, Form } from \"remix\";\nimport { login, createUserSession, register } from \"~/utils/session.server\";\nimport { db } from \"~/utils/db.server\";\nimport stylesUrl from \"../styles/login.css\";\n\nexport let meta: MetaFunction = () => {\n  return {\n    title: \"Remix Jokes | Login\",\n    description: \"Login to submit your own jokes to Remix Jokes!\",\n  };\n};\n\nexport let links: LinksFunction = () => {\n  return [{ rel: \"stylesheet\", href: stylesUrl }];\n};\n\nexport let headers: HeadersFunction = () => {\n  return {\n    \"Cache-Control\": `public, max-age=${60 * 10}, s-maxage=${\n      60 * 60 * 24 * 30\n    }`,\n  };\n};\n\nfunction validateUsername(username: unknown) {\n  if (typeof username !== \"string\" || username.length < 3) {\n    return `Usernames must be at least 3 characters long`;\n  }\n}\n\nfunction validatePassword(password: unknown) {\n  if (typeof password !== \"string\" || password.length < 6) {\n    return `Passwords must be at least 6 characters long`;\n  }\n}\n\ntype ActionData = {\n  formError?: string;\n  fieldErrors?: { username: string | undefined; password: string | undefined };\n  fields?: { loginType: string; username: string; password: string };\n};\n\nexport let action: ActionFunction = async ({\n  request,\n}): Promise<Response | ActionData> => {\n  let { loginType, username, password } = Object.fromEntries(\n    await request.formData()\n  );\n  if (\n    typeof loginType !== \"string\" ||\n    typeof username !== \"string\" ||\n    typeof password !== \"string\"\n  ) {\n    return { formError: `Form not submitted correctly.` };\n  }\n\n  let fields = { loginType, username, password };\n  let fieldErrors = {\n    username: validateUsername(username),\n    password: validatePassword(password),\n  };\n  if (Object.values(fieldErrors).some(Boolean)) return { fieldErrors, fields };\n\n  switch (loginType) {\n    case \"login\": {\n      const user = await login({ username, password });\n      if (!user) {\n        return {\n          fields,\n          formError: `Username/Password combination is incorrect`,\n        };\n      }\n      return createUserSession(user.id, \"/jokes\");\n    }\n    case \"register\": {\n      let userExists = await db.user.findFirst({ where: { username } });\n      if (userExists) {\n        return {\n          fields,\n          formError: `User with username ${username} already exists`,\n        };\n      }\n      const user = await register({ username, password });\n      if (!user) {\n        return {\n          fields,\n          formError: `Something went wrong trying to create a new user.`,\n        };\n      }\n      return createUserSession(user.id, \"/jokes\");\n    }\n    default: {\n      return { fields, formError: `Login type invalid` };\n    }\n  }\n};\n\nexport default function Login() {\n  const actionData = useActionData<ActionData | undefined>();\n  return (\n    <div className=\"container\">\n      <div className=\"content\" data-light=\"\">\n        <h1>Login</h1>\n        <Form\n          method=\"post\"\n          aria-describedby={\n            actionData?.formError ? \"form-error-message\" : undefined\n          }\n        >\n          <fieldset>\n            <legend className=\"sr-only\">Login or Register?</legend>\n            <label>\n              <input\n                type=\"radio\"\n                name=\"loginType\"\n                value=\"login\"\n                defaultChecked={\n                  !actionData?.fields?.loginType ||\n                  actionData?.fields?.loginType === \"login\"\n                }\n              />{\" \"}\n              Login\n            </label>\n            <label>\n              <input\n                type=\"radio\"\n                name=\"loginType\"\n                value=\"register\"\n                defaultChecked={actionData?.fields?.loginType === \"register\"}\n              />{\" \"}\n              Register\n            </label>\n          </fieldset>\n          <div>\n            <label htmlFor=\"username-input\">Username</label>\n            <input\n              type=\"text\"\n              id=\"username-input\"\n              name=\"username\"\n              defaultValue={actionData?.fields?.username}\n              aria-invalid={!!actionData?.fieldErrors?.username || undefined}\n              aria-describedby={\n                actionData?.fieldErrors?.username ? \"username-error\" : undefined\n              }\n            />\n            {actionData?.fieldErrors?.username ? (\n              <p\n                className=\"form-validation-error\"\n                role=\"alert\"\n                id=\"username-error\"\n              >\n                {actionData?.fieldErrors.username}\n              </p>\n            ) : null}\n          </div>\n          <div>\n            <label htmlFor=\"password-input\">Password</label>\n            <input\n              id=\"password-input\"\n              name=\"password\"\n              defaultValue={actionData?.fields?.password}\n              type=\"password\"\n              aria-invalid={!!actionData?.fieldErrors?.password || undefined}\n              aria-describedby={\n                actionData?.fieldErrors?.password ? \"password-error\" : undefined\n              }\n            />\n            {actionData?.fieldErrors?.password ? (\n              <p\n                className=\"form-validation-error\"\n                role=\"alert\"\n                id=\"password-error\"\n              >\n                {actionData?.fieldErrors.password}\n              </p>\n            ) : null}\n          </div>\n          <div id=\"form-error-message\">\n            {actionData?.formError ? (\n              <p className=\"form-validation-error\" role=\"alert\">\n                {actionData?.formError}\n              </p>\n            ) : null}\n          </div>\n          <button type=\"submit\" className=\"button\">\n            Submit\n          </button>\n        </Form>\n      </div>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;;;ACAA;AAOA,qBAAmD;AACnD,gBAAmB;;;;;;AAGZ,IAAI,OAAqB,MAAM;AACpC,SAAO;AAAA,IACL,OAAO;AAAA,IACP,aAAa;AAAA;AAAA;AAIV,IAAI,QAAuB,MAAM;AACtC,SAAO,CAAC,EAAE,KAAK,cAAc,MAAM;AAAA;AAoFtB,iBAAiB;AAvGhC;AAwGE,QAAM,aAAa;AACnB,SACE,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,KACb,oCAAC,OAAD;AAAA,IAAK,WAAU;AAAA,IAAU,cAAW;AAAA,KAClC,oCAAC,MAAD,MAAI,UACJ,oCAAC,MAAD;AAAA,IACE,QAAO;AAAA,IACP,oBACE,0CAAY,aAAY,uBAAuB;AAAA,KAGjD,oCAAC,YAAD,MACE,oCAAC,UAAD;AAAA,IAAQ,WAAU;AAAA,KAAU,uBAC5B,oCAAC,SAAD,MACE,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,MAAK;AAAA,IACL,OAAM;AAAA,IACN,gBACE,CAAC,gDAAY,WAAZ,mBAAoB,cACrB,gDAAY,WAAZ,mBAAoB,eAAc;AAAA,MAEnC,KAAI,UAGT,oCAAC,SAAD,MACE,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,MAAK;AAAA,IACL,OAAM;AAAA,IACN,gBAAgB,gDAAY,WAAZ,mBAAoB,eAAc;AAAA,MACjD,KAAI,cAIX,oCAAC,OAAD,MACE,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KAAiB,aAChC,oCAAC,SAAD;AAAA,IACE,MAAK;AAAA,IACL,IAAG;AAAA,IACH,MAAK;AAAA,IACL,cAAc,+CAAY,WAAZ,mBAAoB;AAAA,IAClC,gBAAc,CAAC,CAAC,gDAAY,gBAAZ,mBAAyB,aAAY;AAAA,IACrD,oBACE,gDAAY,gBAAZ,mBAAyB,YAAW,mBAAmB;AAAA,MAG1D,gDAAY,gBAAZ,mBAAyB,YACxB,oCAAC,KAAD;AAAA,IACE,WAAU;AAAA,IACV,MAAK;AAAA,IACL,IAAG;AAAA,KAEF,yCAAY,YAAY,YAEzB,OAEN,oCAAC,OAAD,MACE,oCAAC,SAAD;AAAA,IAAO,SAAQ;AAAA,KAAiB,aAChC,oCAAC,SAAD;AAAA,IACE,IAAG;AAAA,IACH,MAAK;AAAA,IACL,cAAc,+CAAY,WAAZ,mBAAoB;AAAA,IAClC,MAAK;AAAA,IACL,gBAAc,CAAC,CAAC,gDAAY,gBAAZ,mBAAyB,aAAY;AAAA,IACrD,oBACE,gDAAY,gBAAZ,mBAAyB,YAAW,mBAAmB;AAAA,MAG1D,gDAAY,gBAAZ,mBAAyB,YACxB,oCAAC,KAAD;AAAA,IACE,WAAU;AAAA,IACV,MAAK;AAAA,IACL,IAAG;AAAA,KAEF,yCAAY,YAAY,YAEzB,OAEN,oCAAC,OAAD;AAAA,IAAK,IAAG;AAAA,KACL,0CAAY,aACX,oCAAC,KAAD;AAAA,IAAG,WAAU;AAAA,IAAwB,MAAK;AAAA,KACvC,yCAAY,aAEb,OAEN,oCAAC,UAAD;AAAA,IAAQ,MAAK;AAAA,IAAS,WAAU;AAAA,KAAS;AAAA;",
  "names": []
}
