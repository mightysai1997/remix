{
  "version": 3,
  "sources": ["browser-route-module:/Users/kentcdodds/code/remix/examples/jokes/app/routes/jokes/$jokeId.tsx?browser", "../../../../app/routes/jokes/$jokeId.tsx"],
  "sourcesContent": ["export { CatchBoundary, default, meta } from \"/Users/kentcdodds/code/remix/examples/jokes/app/routes/jokes/$jokeId.tsx\";", "import type {\n  LoaderFunction,\n  ActionFunction,\n  MetaFunction,\n  HeadersFunction,\n} from \"remix\";\nimport { json, useLoaderData, useCatch, Link, Form, redirect } from \"remix\";\nimport { useParams } from \"react-router-dom\";\nimport type { Joke } from \"@prisma/client\";\nimport { db } from \"~/utils/db.server\";\nimport { getUserId, requireUserId } from \"~/utils/session.server\";\n\nexport let meta: MetaFunction = ({ data }: { data: LoaderData }) => {\n  return {\n    title: `\"${data.joke.name}\" joke`,\n    description: `Enjoy the \"${data.joke.name}\" joke and much more`,\n  };\n};\n\ntype LoaderData = { joke: Joke; isOwner: boolean };\n\nexport let loader: LoaderFunction = async ({ request, params }) => {\n  let userId = await getUserId(request);\n  let joke = await db.joke.findUnique({ where: { id: params.jokeId } });\n  if (!joke) {\n    throw new Response(\"What a joke! Not found.\", { status: 404 });\n  }\n  let data: LoaderData = { joke, isOwner: userId === joke.jokesterId };\n  return json(data, {\n    headers: {\n      \"Cache-Control\": `private, max-age=${60 * 5}`,\n    },\n  });\n};\n\nexport let headers: HeadersFunction = ({ loaderHeaders }) => {\n  return {\n    \"Cache-Control\": loaderHeaders.get(\"Cache-Control\") ?? \"\",\n  };\n};\n\nexport let action: ActionFunction = async ({ request, params }) => {\n  if (request.method === \"DELETE\") {\n    let userId = await requireUserId(request);\n    let joke = await db.joke.findUnique({ where: { id: params.jokeId } });\n    if (!joke) {\n      throw new Response(\"Can't delete what does not exist\", { status: 404 });\n    }\n    if (joke.jokesterId !== userId) {\n      throw new Response(\"Pssh, nice try. That's not your joke\", {\n        status: 401,\n      });\n    }\n    await db.joke.delete({ where: { id: params.jokeId } });\n    return redirect(\"/jokes\");\n  }\n};\n\nexport default function JokeRoute() {\n  let data = useLoaderData<LoaderData>();\n\n  return (\n    <div>\n      <p>Here's your hilarious joke:</p>\n      <p>{data.joke.content}</p>\n      <Link to=\".\">{data.joke.name} Permalink</Link>\n      {data.isOwner ? (\n        <Form method=\"delete\">\n          <button type=\"submit\" className=\"button\">\n            Delete\n          </button>\n        </Form>\n      ) : null}\n    </div>\n  );\n}\n\nexport function CatchBoundary() {\n  let caught = useCatch();\n  let params = useParams();\n  switch (caught.status) {\n    case 404: {\n      return <div>Huh? What the heck is {params.jokeId}?</div>;\n    }\n    case 401: {\n      return <div>Sorry, but {params.jokeId} is not your joke.</div>;\n    }\n    default: {\n      throw new Error(`Unhandled error: ${caught.status}`);\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;;;ACAA;AAOA,8BAA0B;AAE1B,gBAAmB;AACnB,qBAAyC;AAElC,IAAI,OAAqB,CAAC,EAAE,WAAiC;AAClE,SAAO;AAAA,IACL,OAAO,IAAI,KAAK,KAAK;AAAA,IACrB,aAAa,cAAc,KAAK,KAAK;AAAA;AAAA;AA2C1B,qBAAqB;AAClC,MAAI,OAAO;AAEX,SACE,oCAAC,OAAD,MACE,oCAAC,KAAD,MAAG,gCACH,oCAAC,KAAD,MAAI,KAAK,KAAK,UACd,oCAAC,MAAD;AAAA,IAAM,IAAG;AAAA,KAAK,KAAK,KAAK,MAAK,eAC5B,KAAK,UACJ,oCAAC,MAAD;AAAA,IAAM,QAAO;AAAA,KACX,oCAAC,UAAD;AAAA,IAAQ,MAAK;AAAA,IAAS,WAAU;AAAA,KAAS,aAIzC;AAAA;AAKH,yBAAyB;AAC9B,MAAI,SAAS;AACb,MAAI,SAAS;AACb,UAAQ,OAAO;AAAA,SACR,KAAK;AACR,aAAO,oCAAC,OAAD,MAAK,0BAAuB,OAAO,QAAO;AAAA;AAAA,SAE9C,KAAK;AACR,aAAO,oCAAC,OAAD,MAAK,eAAY,OAAO,QAAO;AAAA;AAAA,aAE/B;AACP,YAAM,IAAI,MAAM,oBAAoB,OAAO;AAAA;AAAA;AAAA;",
  "names": []
}
