{
  "version": 3,
  "sources": ["browser-route-module:/Users/kentcdodds/code/remix/examples/jokes/app/routes/jokes-rss.tsx?browser", "../../../app/routes/jokes-rss.tsx"],
  "sourcesContent": ["export * from \"/Users/kentcdodds/code/remix/examples/jokes/app/routes/jokes-rss.tsx\";", "import type { LoaderFunction } from \"remix\";\nimport { db } from \"~/utils/db.server\";\n\nexport let loader: LoaderFunction = async ({ request }) => {\n  let jokes = await db.joke.findMany({\n    take: 100,\n    orderBy: { createdAt: \"desc\" },\n    include: { jokester: { select: { username: true } } },\n  });\n\n  const host =\n    request.headers.get(\"X-Forwarded-Host\") ?? request.headers.get(\"host\");\n  if (!host) {\n    throw new Error(\"Could not determine domain URL.\");\n  }\n  const protocol = host.includes(\"localhost\") ? \"http\" : \"https\";\n  let domain = `${protocol}://${host}`;\n  const jokesUrl = `${domain}/jokes`;\n\n  let rssString = `\n    <rss xmlns:blogChannel=\"${jokesUrl}\" version=\"2.0\">\n      <channel>\n        <title>Remix Jokes</title>\n        <link>${jokesUrl}</link>\n        <description>Some funny jokes</description>\n        <language>en-us</language>\n        <generator>Kody the Koala</generator>\n        <ttl>40</ttl>\n        ${jokes\n          .map((joke) =>\n            `\n            <item>\n              <title>${joke.name}</title>\n              <description>A funny joke called ${joke.name}</description>\n              <author>${joke.jokester.username}</author>\n              <pubDate>${joke.createdAt}</pubDate>\n              <link>${jokesUrl}/${joke.id}</link>\n              <guid>${jokesUrl}/${joke.id}</guid>\n            </item>\n          `.trim()\n          )\n          .join(\"\\n\")}\n      </channel>\n    </rss>\n  `.trim();\n\n  return new Response(rssString, {\n    headers: {\n      \"Cache-Control\": `public, max-age=${60 * 10} s-maxage=${60 * 60 * 24}`,\n      \"Content-Type\": \"application/xml\",\n      \"Content-Length\": String(Buffer.byteLength(rssString)),\n    },\n  });\n};\n"],
  "mappings": ";;;;;;;;;AAAA;;;ACAA;AACA,gBAAmB;AAEZ,IAAI,SAAyB,OAAO,EAAE,cAAc;AAH3D;AAIE,MAAI,QAAQ,MAAM,aAAG,KAAK,SAAS;AAAA,IACjC,MAAM;AAAA,IACN,SAAS,EAAE,WAAW;AAAA,IACtB,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU;AAAA;AAG7C,QAAM,OACJ,cAAQ,QAAQ,IAAI,wBAApB,YAA2C,QAAQ,QAAQ,IAAI;AACjE,MAAI,CAAC,MAAM;AACT,UAAM,IAAI,MAAM;AAAA;AAElB,QAAM,WAAW,KAAK,SAAS,eAAe,SAAS;AACvD,MAAI,SAAS,GAAG,cAAc;AAC9B,QAAM,WAAW,GAAG;AAEpB,MAAI,YAAY;AAAA,8BACY;AAAA;AAAA;AAAA,gBAGd;AAAA;AAAA;AAAA;AAAA;AAAA,UAKN,MACC,IAAI,CAAC,SACJ;AAAA;AAAA,uBAEW,KAAK;AAAA,iDACqB,KAAK;AAAA,wBAC9B,KAAK,SAAS;AAAA,yBACb,KAAK;AAAA,sBACR,YAAY,KAAK;AAAA,sBACjB,YAAY,KAAK;AAAA;AAAA,YAE3B,QAED,KAAK;AAAA;AAAA;AAAA,IAGZ;AAEF,SAAO,IAAI,SAAS,WAAW;AAAA,IAC7B,SAAS;AAAA,MACP,iBAAiB,mBAAmB,KAAK,eAAe,KAAK,KAAK;AAAA,MAClE,gBAAgB;AAAA,MAChB,kBAAkB,OAAO,OAAO,WAAW;AAAA;AAAA;AAAA;",
  "names": []
}
